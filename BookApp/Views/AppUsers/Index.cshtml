@model IEnumerable<Shared.DTOs.AppUserDTO>

<div class="page-content page-container" id="page-content">
    <div class="padding">
        <div class="row container d-flex justify-content-center">
            <div class="col-lg-10 grid-margin stretch-card">
                <div class="card">
                    <div class="card-body">
                        <h4 class="card-title">User Management</h4>
                        <p class="card-description">Manage users, their status, and more</p>

                        <div class="form-group position-relative">
                            <input type="text" id="searchEmail" class="form-control" placeholder="Search by Email" style="padding-left: 2.5rem;" />
                            <span class="search-icon position-absolute" style="left: 10px; top: 10px;">
                                <i class="fas fa-search"></i> <!-- Using FontAwesome for the search icon -->
                            </span>
                        </div>

                        <div class="table-responsive mt-4">
                            <table class="table table-striped table-hover align-middle">
                                <thead class="text-white" style="background-color:#c3ae85">
                                    <tr>
                                        <th>Name</th>
                                        <th>Email</th>
                                        <th>Created On</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="userTableBody">
                                    @foreach (var user in Model)
                                    {
                                        <tr>
                                            <td>@user.FirstName @user.LastName</td>
                                            <td>@user.Email</td>
                                            <td>@user.CreatedOn.ToString("MMMM dd, yyyy")</td>
                                            <td>
                                                <label class="badge @(user.AdminAccepted ? "badge-success" : "badge-danger") text-black">
                                                    @(user.AdminAccepted ? "✓ Accepted" : "✘ Pending")
                                                </label>
                                            </td>
                                            <td>
                                                <!-- Dropdown for actions -->
                                                <div class="dropdown">
                                                    <button class="btn  dropdown-toggle" type="button" id="dropdownMenuButton-@user.Id" data-bs-toggle="dropdown" aria-expanded="false">
                                                        <i class="fa-solid fa-ellipsis-vertical"></i>
                                                    </button>
                                                    <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton-@user.Id">
                                                        <li>
                                                            <form asp-action="ToggleAdminAccepted" asp-route-id="@user.Id" method="post">
                                                                <button type="submit" class="dropdown-item text-primary">@((user.AdminAccepted) ? "Reject" : "Accept")</button>
                                                            </form>
                                                        </li>
                                                        <li>
                                                            <form asp-action="ToggleDelete" asp-route-id="@user.Id" method="post">
                                                                <button type="submit" class="dropdown-item text-danger">@((user.IsDeleted) ? "Restore" : "Delete")</button>
                                                            </form>
                                                        </li>
                                                    </ul>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/js/all.min.js"></script> <!-- FontAwesome CDN -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js" integrity="sha384-mQ93DqkMZ8BYwBU7pOYF3dt5FgD5SYj26h2nIRTciU8B0Nw5dOe2t5F6YQ2oEkEz" crossorigin="anonymous"></script>

    <script>
        // Sorting functionality
        document.querySelectorAll('.sort-column').forEach(function (element) {
            element.addEventListener('click', function (e) {
                e.preventDefault();
                var column = this.getAttribute('data-column');
                var order = this.getAttribute('data-order');
                var newOrder = order === 'asc' ? 'desc' : 'asc';
                var url = '@Url.Action("Index")' + '?sortColumn=' + encodeURIComponent(column) + '&sortOrder=' + encodeURIComponent(newOrder);
                fetch(url)
                    .then(response => response.text())
                    .then(html => {
                        var parser = new DOMParser();
                        var newDoc = parser.parseFromString(html, 'text/html');
                        var newTableBody = newDoc.getElementById('userTableBody');
                        document.getElementById('userTableBody').innerHTML = newTableBody.innerHTML;
                        this.setAttribute('data-order', newOrder);
                        var icon = this.querySelector('i');
                        icon.classList.remove('fa-sort', 'fa-sort-asc', 'fa-sort-desc');
                        icon.classList.add(newOrder === 'asc' ? 'fa-sort-asc' : 'fa-sort-desc');
                    });
            });
        });

        // Search functionality
        document.getElementById('searchEmail').addEventListener('input', function () {
            var searchEmail = this.value.trim();
            var url = '@Url.Action("Index")' + (searchEmail.length > 0 ? '?searchEmail=' + encodeURIComponent(searchEmail) : '');
            fetch(url)
                .then(response => response.text())
                .then(html => {
                    var parser = new DOMParser();
                    var newDoc = parser.parseFromString(html, 'text/html');
                    var newTableBody = newDoc.getElementById('userTableBody');
                    document.getElementById('userTableBody').innerHTML = newTableBody.innerHTML;
                });
        });
    </script>
}
