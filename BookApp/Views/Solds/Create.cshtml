@model Shared.DTOs.SoldCreateDTO
@using Domain.Entites

@{
    ViewData["Title"] = "Create Sold";
}

<h1>Create Sold</h1>

<form asp-action="Create">
    <div class="form-group">
        <label for="BookId">Book</label>
        @if (ViewBag.Books == null || !((IEnumerable<Book>)ViewBag.Books).Any())
        {
            <p>No books available for selection.</p>
        }
        else
        {
            <select id="BookId" name="BookId" class="form-control" asp-for="BookId" asp-items="@(new SelectList(ViewBag.Books, "Id", "Title"))"></select>
        }
        <span asp-validation-for="BookId" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label for="Quantity">Quantity</label>
        <input id="Quantity" name="Quantity" class="form-control" asp-for="Quantity" />
        <span asp-validation-for="Quantity" class="text-danger"></span>
    </div>

    <input type="hidden" id="CartId" name="CartId" value="@ViewBag.Cart" />
    <input type="hidden" id="UserId" name="UserId" value="@ViewBag.User" />
    <input type="hidden" id="PurchaseDate" name="PurchaseDate" value="@DateTime.Now" />

    <div class="form-group">
        <input type="submit" value="Create" class="btn btn-primary" />
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
