@model Shared.DTOs.SoldCreateViewModel

@{
    ViewData["Title"] = "Create Sold";
}

<h1>Create Sold</h1>

<form asp-action="Create" method="post" id="soldForm">
    @if (Model.Books == null || !Model.Books.Any())
    {
        <p>No books available for selection.</p>
    }
    else
    {
        <div class="row">
            @for (int i = 0; i < Model.Books.Count; i++)
            {
                var book = Model.Books[i];
                <div class="col-md-4">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">@book.Title</h5>
                            <p class="card-text">Description here</p>
                            <input type="hidden" name="Books[@i].Id" value="@book.Id" />
                            <input type="hidden" name="Books[@i].Title" value="@book.Title" />
                            <label for="Quantity_@book.Id">Quantity</label>
                            <input id="Quantity_@book.Id" name="Books[@i].Quantity" type="number" min="0" class="form-control quantity-input" placeholder="Enter quantity or leave empty" />
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    <input type="hidden" name="CartId" value="@Model.CartId" />
    <input type="hidden" name="UserId" value="@Model.UserId" />

    <div class="form-group mt-3">
        <input type="submit" value="Create" class="btn btn-primary" />
    </div>
</form>

@section Scripts {
    <script>
        document.getElementById('soldForm').addEventListener('submit', function (e) {
            // Get all quantity input fields
            var quantities = document.querySelectorAll('.quantity-input');

            // Iterate over all quantity inputs and check their values
            quantities.forEach(function (input, index) {
                if (!input.value || parseInt(input.value) <= 0) {
                    // Remove the hidden fields for books with quantity <= 0 or empty
                    input.closest('.card').remove();
                }
            });
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
